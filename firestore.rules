rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isDocumentOwner(userId) {
      return request.auth.uid == userId;
    }

    function isDocumentParticipant(documentId) {
      return exists(/databases/$(database)/documents/documents/$(documentId)) &&
             get(/databases/$(database)/documents/documents/$(documentId)).data.userId == request.auth.uid;
    }

    // Documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isDocumentOwner(resource.data.userId);
    }
    
    // Versions collection
    match /versions/{versionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isDocumentParticipant(resource.data.documentId);
      allow delete: if isAuthenticated() && isDocumentParticipant(resource.data.documentId);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == userId;
      allow update: if isDocumentOwner(userId);
    }
    
    // Chat messages collection
    match /chat_messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isDocumentOwner(resource.data.userId) || 
        isDocumentParticipant(resource.data.documentId)
      );
      allow delete: if isAuthenticated() && (
        isDocumentOwner(resource.data.userId) || 
        isDocumentParticipant(resource.data.documentId)
      );
    }
  }
} 