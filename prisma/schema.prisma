generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  teamMembers           TeamMember[]
  documentCollaborators DocumentCollaborator[]
  addedCollaborators    DocumentCollaborator[] @relation("AddedByUser")
  accessLogs           AccessLog[]            @relation("PerformedByUser")
  temporaryLinks       TemporaryLink[]        @relation("CreatedByUser")
  notifications        Notification[]
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collaborators    DocumentCollaborator[]
  accessLogs       AccessLog[]
  temporaryLinks   TemporaryLink[]
  notifications    Notification[]
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members       TeamMember[]
  collaborators DocumentCollaborator[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model DocumentCollaborator {
  id        String    @id @default(cuid())
  documentId String
  userId    String
  teamId    String?
  role      String
  addedBy   String
  addedAt   DateTime  @default(now())
  expiresAt DateTime?
  updatedAt DateTime  @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  addedByUser User  @relation("AddedByUser", fields: [addedBy], references: [id])

  @@unique([documentId, userId])
}

model AccessLog {
  id          String   @id @default(cuid())
  documentId  String
  action      String
  performedBy String
  details     String
  timestamp   DateTime @default(now())

  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  performedByUser User @relation("PerformedByUser", fields: [performedBy], references: [id])
}

model TemporaryLink {
  id          String   @id @default(cuid())
  documentId  String
  url         String   @unique
  role        String
  createdBy   String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  usageCount  Int      @default(0)
  maxUses     Int?
  isRevoked   Boolean  @default(false)

  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdByUser User    @relation("CreatedByUser", fields: [createdBy], references: [id])
}

model Notification {
  id            String   @id @default(cuid())
  type          String
  title         String
  message       String
  documentId    String
  documentTitle String
  userId        String
  createdAt     DateTime @default(now())
  read          Boolean  @default(false)
  actionUrl     String?
  actionLabel   String?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
} 